def find_combination(num_galons, prices, weights, max_weight):
    # Matriks untuk menyimpan harga total maksimum yang dapat dicapai pada setiap berat maksimum
    dp = [[0] * (max_weight + 1) for _ in range(num_galons + 1)]

    # Loop untuk mengisi matriks dp
    for i in range(1, num_galons + 1):
        for j in range(1, max_weight + 1):
            if weights[i - 1] <= j:
                # Memilih antara mengambil galon ke-i atau tidak mengambilnya
                dp[i][j] = max(dp[i - 1][j], prices[i - 1] + dp[i - 1][j - weights[i - 1]])
            else:
                dp[i][j] = dp[i - 1][j]

    # Mengembalikan harga total maksimum
    max_price = dp[num_galons][max_weight]

    # Mencari kombinasi berat galon yang menghasilkan harga total maksimum
    total_weight = max_weight
    combination = []
    for i in range(num_galons, 0, -1):
        if max_price <= 0:
            break
        if max_price == dp[i - 1][total_weight]:
            continue
        else:
            combination.append(weights[i - 1])
            max_price -= prices[i - 1]
            total_weight -= weights[i - 1]

    return sorted(combination), dp[num_galons][max_weight]


# Input
num_galons = int(input())
prices = list(map(int, input().split()))
weights = list(map(int, input().split()))
max_weight = int(input())

# Panggil fungsi dan cetak hasil
combination, max_price = find_combination(num_galons, prices, weights, max_weight)
print(" ".join(str(w) for w in combination))
print(max_price)
